<!DOCTYPE html><meta charset={+IO.encoding+}>
{! Link.base = "../"; !}
<title>SocialGraph Reference - {+data.alias+}</title>
<style>{+include("static/default.css")+}</style>
{+include("static/header.html")+}
<section>
<h1><a href=../..>SocialGraph</a> / <a href=..>Documentation</a> / {!
	var classType = "";
					
	if (data.isBuiltin()) classType += "Built-In ";
					
	if (data.isNamespace) {
		if (data.is('FUNCTION')) classType += "Function ";
		classType += "Namespace ";
	}
	else classType += "Class ";
!} {+classType+}{+data.alias+}</h1>
<p class="description">
<if test="data.version"><br />Version {+ data.version +}.<br /></if>
<if test="data.augments.length"><br />Extends
{+data.augments.sort().map(function($) { return new Link().toSymbol($); }).join(", ")+}.<br />
</if>
{+resolveLinks(data.classDesc)+}
				
<if test="!data.isBuiltin()">{# isn't defined in any file #}
<br /><i>Defined in: </i> {+new Link().toSrc(data.srcFile)+}.
</if>
</p>
		
<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
<h2>{+classType+}Summary</h2>
{!
	if (data.isPrivate) output += "<tt>private</tt> ";
	if (data.isInner) output += "<tt>inner</tt> ";
!}
<tt>new</tt> {+ new Link().toSymbol(data.alias).inner('constructor')+}
<if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
<p>{+resolveLinks(summarize(data.desc))+}</p>
</if><if test="data.properties.length">{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}<if test="ownProperties.length"><h3>Properties</h3><ul><for each="member" in="ownProperties"><li>{!
	if (member.isPrivate) output += "<tt>private</tt> ";
	if (member.isInner) output += "<tt>&lt;inner&gt;</tt> ";
	if (member.isStatic) output += "<tt>static</tt> ";
	if (member.isConstant) output += "<tt>constant</tt> ";
!}<if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if>{+new Link().toSymbol(member.alias).withText(member.name)+}<if test="member.desc != ''"><p>{+resolveLinks(summarize(member.desc))+}</p></if></li></for></ul></if>
				
<if test="data.inheritsFrom.length">
<dl class="inheritsList">
				{!
					var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
					
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}
				!}
				</dl>
				</if>
			</if>
<if test="data.methods.length">
{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
<if test="ownMethods.length">
<h3>Methods</h3>
<ul><for each="member" in="ownMethods">
<li>{!
	if (member.isPrivate) output += "<tt>private</tt> ";
	if (member.isInner) output += "<tt>inner</tt> ";
	if (member.isStatic) output += "<tt>static</tt> ";
!}<if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if>{+new Link().toSymbol(member.alias).withText(member.name.replace(/\^\d+$/, ''))+}{+makeSignature(member.params)+}
<if test="member.desc != ''"><p>{+resolveLinks(summarize(member.desc))+}</p></if></li>
</for></ul></if>	
	<if test="data.inheritsFrom.length">
	<dl class="inheritsList">
	{!
		var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
		var contributers = [];
		borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
		for (var i = 0, l = contributers.length; i < l; i++) {
			output +=
				"<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
				+
				"<dd>" +
				borrowedMembers
				.filter(
					function($) { return $.memberOf == contributers[i] }
				)
				.sort(makeSortby("name"))
				.map(
					function($) { return new Link().toSymbol($.alias).withText($.name) }
				)
				.join(", ")
				+
				"</dd>";
		}
	!}
	</dl>
	</if>
</if>
<if test="data.events.length">
{! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
<if test="ownEvents.length">
<h2>Event Summary</h2>
<ul><for each="member" in="ownEvents">
<li>{!
	if (member.isPrivate) output += "&lt;private&gt; ";
	if (member.isInner) output += "&lt;inner&gt; ";
	if (member.isStatic) output += "&lt;static&gt; ";
!}<if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if>{+new Link().toSymbol(member.alias).withText(member.name)+}{+makeSignature(member.params)+}
<p>{+resolveLinks(summarize(member.desc))+}</p></li>
</for></ul></if>	
	<if test="data.inheritsFrom.length">
	<ul>
	{!
		var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
		var contributers = [];
		borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
		for (var i = 0, l = contributers.length; i < l; i++) {
			output +=
				"<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
				+
				"<li>" +
				borrowedMembers
				.filter(
					function($) { return $.memberOf == contributers[i] }
				)
				.sort(makeSortby("name"))
				.map(
					function($) { return new Link().toSymbol($.alias).withText($.name) }
				)
				.join(", ")
				+
				"</li>";
		}
	
	!}
	</ul>
	</if>
</if>
<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
<h2 id="constructor">{+classType+}Detail</h2>			
{!
	if (data.isPrivate) output += "<tt>&lt;private&gt;</tt> ";
	if (data.isInner) output += "<tt>&lt;inner&gt;</tt> ";
!}
{+ data.alias +}<if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>			
<p>{+resolveLinks(data.desc)+}
<if test="data.author"><br /><i>Author: </i>{+data.author+}.</if>
</p>			
<if test="data.example.length">
<for each="example" in="data.example">
<pre>{+example+}</pre></for>
</if>
<if test="data.params.length">
Parameters:
<ul>
<for each="item" in="data.params">
<li>
	{+((item.type)?""+("<tt>{"+(new Link().toSymbol(item.type)+"}</tt> ")) : "")+} <b>{+item.name+}</b>
	<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
{+resolveLinks(item.desc)+}</li>
</for></ul></if>
<if test="data.deprecated"><p>Deprecated: {+resolveLinks(data.deprecated)+}</p></if>
<if test="data.since"><p>Since: {+ data.since +}</p></if>
<if test="data.exceptions.length">
Throws:</dt>
						<for each="item" in="data.exceptions">
							<dt>
								{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
							</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
<if test="data.returns.length">
Returns<ul><for each="item" in="data.returns">
<li>{+((item.type)?"<tt>{"+(new Link().toSymbol(item.type))+"}</tt> " : "")+}{+resolveLinks(item.desc)+}</li>
</for></ul></if>
					<if test="data.requires.length">
						<dl class="detailList">
						<dt class="heading">Requires:</dt>
						<for each="item" in="data.requires">
							<dd>{+ new Link().toSymbol(item) +}</dd>
						</for>
						</dl>
					</if>
					<if test="data.see.length">
						<dl class="detailList">
						<dt class="heading">See:</dt>
						<for each="item" in="data.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
						</for>
						</dl>
					</if>
			</div>
			</if>

<if test="defined(ownProperties) && ownProperties.length"><h3>Field Detail</h3><for each="member" in="ownProperties"><b id="{+Link.symbolNameToLinkName(member)+}">{!
	if (member.isPrivate) output += "<tt>&lt;private&gt;</tt> ";
	if (member.isInner) output += "<tt>&lt;inner&gt;</tt> ";
	if (member.isStatic) output += "<tt>&lt;static&gt;</tt> ";
	if (member.isConstant) output += "<tt>&lt;constant&gt;</tt> ";
!}<if test="member.type"><tt>{{+new Link().toSymbol(member.type)+}}</tt></if><if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if>{+member.name+}</b>
<p>{+resolveLinks(member.desc)+}<if test="member.srcFile != data.srcFile"><br /><i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.</if><if test="member.author"><br /><i>Author: </i>{+member.author+}.</if></p>
<if test="member.example.length"><for each="example" in="member.example"><pre>{+example+}</pre></for></if>
<if test="member.deprecated"><p>Deprecated: {+ resolveLinks(member.deprecated) +}</p></if>
<if test="member.since"><p>Since: {+ member.since +}</p></if>
<if test="member.see.length">See:<ul><for each="item" in="member.see"><li>{+ new Link().toSymbol(item) +}</li></for></ul></if>
<if test="member.defaultValue"><p>Default Value: {+resolveLinks(member.defaultValue)+}</p></if>
<if test="!$member_last"><hr /></if></for></if>	
<if test="defined(ownMethods) && ownMethods.length">
<h3>Method Detail</h3>
<for each="member" in="ownMethods">
<b name="{+Link.symbolNameToLinkName(member)+}">
{!
	if (member.isPrivate) output += "<tt>&lt;private&gt;</tt> ";
	if (member.isInner) output += "<tt>&lt;inner&gt;</tt> ";
	if (member.isStatic) output += "<tt>&lt;static&gt;</tt> ";
!}
<if test="member.type"><tt>{{+new Link().toSymbol(member.type)+}}</tt></if>
<if test="member.isStatic && member.memberOf != '_global_'"><tt>{+member.memberOf+}.</tt></if>{+member.name.replace(/\^\d+$/, '')+}</b>{+makeSignature(member.params)+}
<p>{+resolveLinks(member.desc)+}
<if test="member.srcFile != data.srcFile"><br /><i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.</if>
<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
</p>
<if test="member.example.length"><for each="example" in="member.example"><pre>{+example+}</pre></for></if>
<if test="member.params.length">
Parameters:<ul><for each="item" in="member.params"><li>{+((item.type)?"<tt>{"+(new Link().toSymbol(item.type))+"}</tt> " : "")+}<var>{+item.name+}</var> <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
{+resolveLinks(item.desc)+}</li></for></ul></if><if test="member.deprecated"><p>Deprecated: {+ resolveLinks(member.deprecated) +}</p></if><if test="member.since"><p>Since: {+ member.since +}</p></if><if test="member.exceptions.length">Throws:<ul><for each="item" in="member.exceptions"><li>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b> {+resolveLinks(item.desc)+}</li></for></ul></if><if test="member.returns.length">Returns:<ul><for each="item" in="member.returns"><li>{+((item.type)?"<tt>{"+(new Link().toSymbol(item.type))+"}</tt> " : "")+}{+resolveLinks(item.desc)+}</li></for></ul></if><if test="member.requires.length">Requires:<ul><for each="item" in="member.requires"><li>{+ resolveLinks(item) +}</li></for></ul></if><if test="member.see.length">See:<ul><for each="item" in="member.see"><li>{+ new Link().toSymbol(item) +}</li></for></ul></if><if test="!$member_last"><hr /></if></for></if>
<if test="defined(ownEvents) && ownEvents.length">
<h3>Event Detail</h3>
<for each="member" in="ownEvents">
<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
{!
	if (member.isPrivate) output += "&lt;private&gt; ";
	if (member.isInner) output += "&lt;inner&gt; ";
	if (member.isStatic) output += "&lt;static&gt; ";
!}
<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
<if test="member.isStatic && member.memberOf != '_global_'"><tt>{+member.memberOf+}.</tt></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
<p>{+resolveLinks(member.desc)+}
<if test="member.srcFile != data.srcFile"><br /><i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.</if>
<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
</p>
<if test="member.example.length"><for each="example" in="member.example"><pre>{+example+}</pre></for></if>
						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<var>{+item.name+}</var>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
<if test="member.deprecated"><p>Deprecated: {+ resolveLinks(member.deprecated) +}</p></if>
<if test="member.since"><p>Since: {+ member.since +}</p></if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
<if test="member.returns.length">Returns:<ul><for each="item" in="member.returns"><li>{+((item.type)?"<tt>{"+(new Link().toSymbol(item.type))+"}</tt> " : "")+}{+resolveLinks(item.desc)+}</li></for></ul></if><if test="member.requires.length">Requires:<ul><for each="item" in="member.requires"><li>{+ resolveLinks(item) +}</li></for></ul></if><if test="member.see.length">See:<ul><for each="item" in="member.see"><li>{+ new Link().toSymbol(item) +}</li></for></ul></if><if test="!$member_last"><hr /></if></for></if>			
<hr />
</section>